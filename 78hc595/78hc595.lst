
78hc595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000120  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001b4  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cef  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000048c  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000044e  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00001f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017a  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 36       	cpi	r26, 0x63	; 99
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	66 d0       	rcall	.+204    	; 0x110 <main>
  44:	6b c0       	rjmp	.+214    	; 0x11c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <writeByte>:
uint8_t mask;
uint16_t mask16;

void writeByte(uint8_t data)
{
	mask = 0x80;
  48:	90 e8       	ldi	r25, 0x80	; 128
  4a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <mask>
	Latch_Clk_L;
  4e:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	e3 ec       	ldi	r30, 0xC3	; 195
  52:	f9 e0       	ldi	r31, 0x09	; 9
  54:	31 97       	sbiw	r30, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <writeByte+0xc>
  58:	00 c0       	rjmp	.+0      	; 0x5a <writeByte+0x12>
  5a:	00 00       	nop
	delay(10);
	while (mask>0)
  5c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <mask>
  60:	99 23       	and	r25, r25
  62:	d9 f0       	breq	.+54     	; 0x9a <writeByte+0x52>
	{
		Shift_Clk_L;
  64:	c1 98       	cbi	0x18, 1	; 24
		if (data&mask)
  66:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <mask>
  6a:	98 23       	and	r25, r24
  6c:	11 f0       	breq	.+4      	; 0x72 <writeByte+0x2a>
			Data_H;	
  6e:	c0 9a       	sbi	0x18, 0	; 24
  70:	01 c0       	rjmp	.+2      	; 0x74 <writeByte+0x2c>
		else
			Data_L;
  72:	c0 98       	cbi	0x18, 0	; 24
  74:	e7 e8       	ldi	r30, 0x87	; 135
  76:	f3 e1       	ldi	r31, 0x13	; 19
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <writeByte+0x30>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <writeByte+0x36>
  7e:	00 00       	nop
		delay(20);   // these delays are arbitrary - they are here to slow things down so you can see the pattern
		Shift_Clk_H;			
  80:	c1 9a       	sbi	0x18, 1	; 24
  82:	e7 e8       	ldi	r30, 0x87	; 135
  84:	f3 e1       	ldi	r31, 0x13	; 19
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <writeByte+0x3e>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <writeByte+0x44>
  8c:	00 00       	nop
		delay(20);		
		
		mask>>=1;
  8e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <mask>
  92:	96 95       	lsr	r25
  94:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <mask>
  98:	e1 cf       	rjmp	.-62     	; 0x5c <writeByte+0x14>
	}
	Latch_Clk_H;
  9a:	c2 9a       	sbi	0x18, 2	; 24
  9c:	08 95       	ret

0000009e <writeUInt16>:
}

void writeUInt16(uint16_t data)
{
	mask16 = 0x8000;
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e8       	ldi	r19, 0x80	; 128
  a2:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a6:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
	Latch_Clk_L;
  aa:	c2 98       	cbi	0x18, 2	; 24
  ac:	e3 ec       	ldi	r30, 0xC3	; 195
  ae:	f9 e0       	ldi	r31, 0x09	; 9
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <writeUInt16+0x12>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <writeUInt16+0x18>
  b6:	00 00       	nop
	delay(10);
	while (mask16>0)
  b8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c0:	23 2b       	or	r18, r19
  c2:	21 f1       	breq	.+72     	; 0x10c <writeUInt16+0x6e>
	{
		Shift_Clk_L;
  c4:	c1 98       	cbi	0x18, 1	; 24
		if (data&mask16)
  c6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ce:	28 23       	and	r18, r24
  d0:	39 23       	and	r19, r25
  d2:	23 2b       	or	r18, r19
  d4:	11 f0       	breq	.+4      	; 0xda <writeUInt16+0x3c>
			Data_H;	
  d6:	c0 9a       	sbi	0x18, 0	; 24
  d8:	01 c0       	rjmp	.+2      	; 0xdc <writeUInt16+0x3e>
		else
			Data_L;
  da:	c0 98       	cbi	0x18, 0	; 24
  dc:	e7 e8       	ldi	r30, 0x87	; 135
  de:	f3 e1       	ldi	r31, 0x13	; 19
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <writeUInt16+0x42>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <writeUInt16+0x48>
  e6:	00 00       	nop
		delay(20);   // these delays are arbitrary - they are here to slow things down so you can see the pattern
		Shift_Clk_H;			
  e8:	c1 9a       	sbi	0x18, 1	; 24
  ea:	e7 e8       	ldi	r30, 0x87	; 135
  ec:	f3 e1       	ldi	r31, 0x13	; 19
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <writeUInt16+0x50>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <writeUInt16+0x56>
  f4:	00 00       	nop
		delay(20);		
		
		mask16>>=1;
  f6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fe:	36 95       	lsr	r19
 100:	27 95       	ror	r18
 102:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	d6 cf       	rjmp	.-84     	; 0xb8 <writeUInt16+0x1a>
	}
	Latch_Clk_H;
 10c:	c2 9a       	sbi	0x18, 2	; 24
 10e:	08 95       	ret

00000110 <main>:
}


int main(void)
{
	DDRB = 0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23
	uint16_t d = 0x101;
	//writeByte(0x05);
	writeUInt16(0x7777);
 114:	87 e7       	ldi	r24, 0x77	; 119
 116:	97 e7       	ldi	r25, 0x77	; 119
 118:	c2 df       	rcall	.-124    	; 0x9e <writeUInt16>
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0xa>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
