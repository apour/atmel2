
HadLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000338  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000088  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000195  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e0  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000db  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	17 c1       	rjmp	.+558    	; 0x242 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	32 d1       	rcall	.+612    	; 0x2a8 <main>
  44:	3d c1       	rjmp	.+634    	; 0x2c0 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <doPause>:
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
void doPause()
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	00 d0       	rcall	.+0      	; 0x4e <doPause+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <doPause+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
	int i=100;
  54:	84 e6       	ldi	r24, 0x64	; 100
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	9a 83       	std	Y+2, r25	; 0x02
  5a:	89 83       	std	Y+1, r24	; 0x01
	int y=1000;
  5c:	88 ee       	ldi	r24, 0xE8	; 232
  5e:	93 e0       	ldi	r25, 0x03	; 3
  60:	9c 83       	std	Y+4, r25	; 0x04
  62:	8b 83       	std	Y+3, r24	; 0x03
	while (i>0) 
  64:	14 c0       	rjmp	.+40     	; 0x8e <doPause+0x46>
	{
		i--;
  66:	89 81       	ldd	r24, Y+1	; 0x01
  68:	9a 81       	ldd	r25, Y+2	; 0x02
  6a:	01 97       	sbiw	r24, 0x01	; 1
  6c:	9a 83       	std	Y+2, r25	; 0x02
  6e:	89 83       	std	Y+1, r24	; 0x01
		y=1000;
  70:	88 ee       	ldi	r24, 0xE8	; 232
  72:	93 e0       	ldi	r25, 0x03	; 3
  74:	9c 83       	std	Y+4, r25	; 0x04
  76:	8b 83       	std	Y+3, r24	; 0x03
		while (y>0)
  78:	05 c0       	rjmp	.+10     	; 0x84 <doPause+0x3c>
		{
			y--;
  7a:	8b 81       	ldd	r24, Y+3	; 0x03
  7c:	9c 81       	ldd	r25, Y+4	; 0x04
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	9c 83       	std	Y+4, r25	; 0x04
  82:	8b 83       	std	Y+3, r24	; 0x03
	int y=1000;
	while (i>0) 
	{
		i--;
		y=1000;
		while (y>0)
  84:	8b 81       	ldd	r24, Y+3	; 0x03
  86:	9c 81       	ldd	r25, Y+4	; 0x04
  88:	18 16       	cp	r1, r24
  8a:	19 06       	cpc	r1, r25
  8c:	b4 f3       	brlt	.-20     	; 0x7a <doPause+0x32>
#include <avr/interrupt.h>
void doPause()
{
	int i=100;
	int y=1000;
	while (i>0) 
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	9a 81       	ldd	r25, Y+2	; 0x02
  92:	18 16       	cp	r1, r24
  94:	19 06       	cpc	r1, r25
  96:	3c f3       	brlt	.-50     	; 0x66 <doPause+0x1e>
		while (y>0)
		{
			y--;
		}
	}
}
  98:	0f 90       	pop	r0
  9a:	0f 90       	pop	r0
  9c:	0f 90       	pop	r0
  9e:	0f 90       	pop	r0
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	08 95       	ret

000000a6 <doPauseQuick>:

void doPauseQuick()
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <doPauseQuick+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <doPauseQuick+0x8>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	int i=1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	89 83       	std	Y+1, r24	; 0x01
	int y=1000;
  ba:	88 ee       	ldi	r24, 0xE8	; 232
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	9c 83       	std	Y+4, r25	; 0x04
  c0:	8b 83       	std	Y+3, r24	; 0x03
	while (i>0) 
  c2:	14 c0       	rjmp	.+40     	; 0xec <doPauseQuick+0x46>
	{
		i--;
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	9a 81       	ldd	r25, Y+2	; 0x02
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	89 83       	std	Y+1, r24	; 0x01
		y=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	9c 83       	std	Y+4, r25	; 0x04
  d4:	8b 83       	std	Y+3, r24	; 0x03
		while (y>0)
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <doPauseQuick+0x3c>
		{
			y--;
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	9c 81       	ldd	r25, Y+4	; 0x04
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	8b 83       	std	Y+3, r24	; 0x03
	int y=1000;
	while (i>0) 
	{
		i--;
		y=1;
		while (y>0)
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	18 16       	cp	r1, r24
  e8:	19 06       	cpc	r1, r25
  ea:	b4 f3       	brlt	.-20     	; 0xd8 <doPauseQuick+0x32>

void doPauseQuick()
{
	int i=1;
	int y=1000;
	while (i>0) 
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	18 16       	cp	r1, r24
  f2:	19 06       	cpc	r1, r25
  f4:	3c f3       	brlt	.-50     	; 0xc4 <doPauseQuick+0x1e>
		while (y>0)
		{
			y--;
		}
	}
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <had>:

void had()
{
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	00 d0       	rcall	.+0      	; 0x10a <had+0x6>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x01;   /* activate all pull-ups */
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
    DDRB = 0xff;    /* all pins output */ 
 118:	87 e3       	ldi	r24, 0x37	; 55
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	PORTC = 0x01;   /* activate all pull-ups */
 122:	85 e3       	ldi	r24, 0x35	; 53
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
    DDRC = 0xff;    /* all pins output */ 
 12c:	84 e3       	ldi	r24, 0x34	; 52
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
	PORTD = 0x01;   /* activate all pull-ups */
 136:	82 e3       	ldi	r24, 0x32	; 50
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
    DDRD = 0xff;    /* all pins output */ 
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	int mask = 0x01;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
		doPause();
 152:	7a df       	rcall	.-268    	; 0x48 <doPause>
		mask<<=1;
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
		if (mask==0x100) 
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	9a 81       	ldd	r25, Y+2	; 0x02
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	80 30       	cpi	r24, 0x00	; 0
 168:	9f 07       	cpc	r25, r31
 16a:	21 f4       	brne	.+8      	; 0x174 <had+0x70>
		{
			mask=1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	9a 83       	std	Y+2, r25	; 0x02
 172:	89 83       	std	Y+1, r24	; 0x01
		}			
		PORTB=~(mask&0xFF);
 174:	88 e3       	ldi	r24, 0x38	; 56
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	20 95       	com	r18
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
		PORTC=~(mask&0xFF);
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	29 81       	ldd	r18, Y+1	; 0x01
 186:	20 95       	com	r18
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
		PORTD=~(mask&0xFF);
 18c:	82 e3       	ldi	r24, 0x32	; 50
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	29 81       	ldd	r18, Y+1	; 0x01
 192:	20 95       	com	r18
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
    }
 198:	dc cf       	rjmp	.-72     	; 0x152 <had+0x4e>

0000019a <testPin>:
}

void testPin()
{
 19a:	df 93       	push	r29
 19c:	cf 93       	push	r28
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x20;   /* activate all pull-ups */
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	20 e2       	ldi	r18, 0x20	; 32
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
    DDRB = 0xff;    /* all pins output */ 
 1ac:	87 e3       	ldi	r24, 0x37	; 55
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
    while(1)
	{
		;
	}	
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <testPin+0x1c>

000001b8 <ledFlashing>:
}

void ledFlashing()
{
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	00 d0       	rcall	.+0      	; 0x1be <ledFlashing+0x6>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x20;   /* activate all pull-ups */
 1c2:	88 e3       	ldi	r24, 0x38	; 56
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	20 e2       	ldi	r18, 0x20	; 32
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
    DDRB = 0xff;    /* all pins output */ 	
 1cc:	87 e3       	ldi	r24, 0x37	; 55
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
	int val = 0x01;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	9a 83       	std	Y+2, r25	; 0x02
 1dc:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
		doPauseQuick();
 1de:	63 df       	rcall	.-314    	; 0xa6 <doPauseQuick>
		PORTB=~(val&0xFF);
 1e0:	88 e3       	ldi	r24, 0x38	; 56
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	29 81       	ldd	r18, Y+1	; 0x01
 1e6:	20 95       	com	r18
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
		val = (val==0x01) ? 0x0 : 0x01;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	3a 81       	ldd	r19, Y+2	; 0x02
 1f4:	21 30       	cpi	r18, 0x01	; 1
 1f6:	31 05       	cpc	r19, r1
 1f8:	11 f4       	brne	.+4      	; 0x1fe <ledFlashing+0x46>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9a 83       	std	Y+2, r25	; 0x02
 200:	89 83       	std	Y+1, r24	; 0x01
    }
 202:	ed cf       	rjmp	.-38     	; 0x1de <ledFlashing+0x26>

00000204 <timer0Init>:

#include <avr/interrupt.h>
short timer0Cnt;

void timer0Init()
   {
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
   // clear timer0Cntr
   timer0Cnt=0;
 20c:	10 92 61 00 	sts	0x0061, r1
 210:	10 92 60 00 	sts	0x0060, r1
   // enable interrupt from timer 0 
   TIMSK = TIMSK | _BV(TOIE0);
 214:	89 e5       	ldi	r24, 0x59	; 89
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	29 e5       	ldi	r18, 0x59	; 89
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	20 81       	ld	r18, Z
 220:	21 60       	ori	r18, 0x01	; 1
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
   // set CLOCK / 8
   TCCR0 = _BV(CS01);
 226:	83 e5       	ldi	r24, 0x53	; 83
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	22 e0       	ldi	r18, 0x02	; 2
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
   // set counter
   TCNT0 = 106;
 230:	82 e5       	ldi	r24, 0x52	; 82
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	2a e6       	ldi	r18, 0x6A	; 106
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
   sei();
 23a:	78 94       	sei
   }
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <__vector_9>:

SIGNAL(SIG_OVERFLOW0)
   {
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
   // set counter
   TCNT0 = 106;
 25e:	82 e5       	ldi	r24, 0x52	; 82
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2a e6       	ldi	r18, 0x6A	; 106
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
   timer0Cnt++;
 268:	80 91 60 00 	lds	r24, 0x0060
 26c:	90 91 61 00 	lds	r25, 0x0061
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 61 00 	sts	0x0061, r25
 276:	80 93 60 00 	sts	0x0060, r24
   if (timer0Cnt == 2)
 27a:	80 91 60 00 	lds	r24, 0x0060
 27e:	90 91 61 00 	lds	r25, 0x0061
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	91 05       	cpc	r25, r1
 286:	21 f4       	brne	.+8      	; 0x290 <__vector_9+0x4e>
      {
      timer0Cnt = 0;
 288:	10 92 61 00 	sts	0x0061, r1
 28c:	10 92 60 00 	sts	0x0060, r1
      // write HERE code after time 200,000 us
      }
   }
 290:	cf 91       	pop	r28
 292:	df 91       	pop	r29
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <main>:
   
int main(void)
{
 2a8:	df 93       	push	r29
 2aa:	cf 93       	push	r28
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
	timer0Init();
 2b0:	a9 df       	rcall	.-174    	; 0x204 <timer0Init>
	had();
 2b2:	28 df       	rcall	.-432    	; 0x104 <had>
	//testPin();
	ledFlashing();
 2b4:	81 df       	rcall	.-254    	; 0x1b8 <ledFlashing>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
