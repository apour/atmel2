
HadLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000fe  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000192  2**0
                  ALLOC
  3 .stab         000007b0  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf7  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000209d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000020b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <doPause>:
  7c:	08 95       	ret

0000007e <doPauseQuick>:
		}
	}
}

void doPauseQuick()
{
  7e:	08 95       	ret

00000080 <had>:
	}
}

void had()
{
	PORTA = 0x01;   /* activate all pull-ups */
  80:	91 e0       	ldi	r25, 0x01	; 1
  82:	9b bb       	out	0x1b, r25	; 27
    DDRA = 0xff;    /* all pins output */ 
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0x01;   /* activate all pull-ups */
  88:	98 bb       	out	0x18, r25	; 24
    DDRB = 0xff;    /* all pins output */ 
  8a:	87 bb       	out	0x17, r24	; 23
	PORTC = 0x01;   /* activate all pull-ups */
  8c:	95 bb       	out	0x15, r25	; 21
    DDRC = 0xff;    /* all pins output */ 
  8e:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x01;   /* activate all pull-ups */
  90:	92 bb       	out	0x12, r25	; 18
    DDRD = 0xff;    /* all pins output */ 
  92:	81 bb       	out	0x11, r24	; 17
	int mask = 0x01;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
    while(1)
    {
		doPause();
		mask<<=1;
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
		if (mask==0x100) 
  9c:	81 15       	cp	r24, r1
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	92 07       	cpc	r25, r18
  a2:	11 f4       	brne	.+4      	; 0xa8 <had+0x28>
		{
			mask=1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
		}
		PORTA=~(mask&0xFF);			
  a8:	28 2f       	mov	r18, r24
  aa:	20 95       	com	r18
  ac:	2b bb       	out	0x1b, r18	; 27
		PORTB=~(mask&0xFF);
  ae:	28 bb       	out	0x18, r18	; 24
		PORTC=~(mask&0xFF);
  b0:	25 bb       	out	0x15, r18	; 21
		PORTD=~(mask&0xFF);
  b2:	22 bb       	out	0x12, r18	; 18
    }
  b4:	f1 cf       	rjmp	.-30     	; 0x98 <had+0x18>

000000b6 <testPin>:
}

void testPin()
{
	PORTB = 0x20;   /* activate all pull-ups */
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	88 bb       	out	0x18, r24	; 24
    DDRB = 0xff;    /* all pins output */ 
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	87 bb       	out	0x17, r24	; 23
  be:	ff cf       	rjmp	.-2      	; 0xbe <testPin+0x8>

000000c0 <ledFlashing>:
	}	
}

void ledFlashing()
{
	PORTB = 0x20;   /* activate all pull-ups */
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	88 bb       	out	0x18, r24	; 24
    DDRB = 0xff;    /* all pins output */ 	
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	87 bb       	out	0x17, r24	; 23
	int val = 0x01;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
    while(1)
    {
		doPauseQuick();
		PORTB=~(val&0xFF);
  cc:	28 2f       	mov	r18, r24
  ce:	20 95       	com	r18
  d0:	28 bb       	out	0x18, r18	; 24
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	82 27       	eor	r24, r18
  d6:	fa cf       	rjmp	.-12     	; 0xcc <ledFlashing+0xc>

000000d8 <timer0Init>:
short timer0Cnt;

void timer0Init()
   {
   // clear timer0Cntr
   timer0Cnt=0;
  d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
   // enable interrupt from timer 0 
   TIMSK = TIMSK | _BV(TOIE0);
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	89 bf       	out	0x39, r24	; 57
   // set CLOCK / 8
   TCCR0 = _BV(CS01);
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	83 bf       	out	0x33, r24	; 51
   // set counter
   TCNT0 = 106;
  ea:	8a e6       	ldi	r24, 0x6A	; 106
  ec:	82 bf       	out	0x32, r24	; 50
   sei();
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <main>:
   }

int main(void)
{
	timer0Init();
  f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <timer0Init>
	had();
  f6:	0e 94 40 00 	call	0x80	; 0x80 <had>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
